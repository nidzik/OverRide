The first call to <fgets> reads 256 bytes from stdin and stores them into <a_user_name>.

The second call to <fgets> reads 100 bytes from stdin and stores them at [ebp-0x1c].

The function <verify_user_name> compares the first 7 bytes of its argument to "dat_wil".
This means in <a_user_name> using the first <fgets> call, we have enough space to concatenate "dat_wil" + <shellcode>

The function <verify_user_pass> compares the first 5 bytes of its argument to "admin".
This doesn't actually matter because we can overflow the stack thanks to the second call to <fgets>.
The program segfaults when the password entered is larger than 79 characters.

The idea is then to use the buffer overflow of the 2nd <fgets> call to overwrite the %eip register to jump back to our shellcode.
The result is :
username = "dat_wil" + "\x31\xdb\x31\xd2\x31\xc9\x51\x68\x6e\x2f\x73\x68\x68\x2f\x2f\x62\x69\x89\xe3\x31\xc0\xb0\x0b\xcd\x80"
password = "\x41" * 80 + &(username + 7)
